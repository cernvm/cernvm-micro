#!/bin/sh

# -------------------------------------------------------------------------- #
# Copyright 2010-2014, C12G Labs S.L.                                        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# Modified for muCernVM Apr 2015

export_rc_vars() {
    if [ -f $1 ] ; then
        ONE_VARS=`cat $1 | egrep -e '^[a-zA-Z\-\_0-9]*=' | sed 's/=.*$//'`

        . $1

        for v in $ONE_VARS; do
            export $v
        done
    fi
}

# Gets IP address from a given MAC
mac2ip() {
    mac=$1

    let ip_a=0x`echo $mac | cut -d: -f 3`
    let ip_b=0x`echo $mac | cut -d: -f 4`
    let ip_c=0x`echo $mac | cut -d: -f 5`
    let ip_d=0x`echo $mac | cut -d: -f 6`

    ip="$ip_a.$ip_b.$ip_c.$ip_d"

    echo $ip
}

# Gets the network part of an IP
get_network() {
    network=$(get_iface_var "NETWORK")

    if [ -z "$network" ]; then
        network="$(echo $IP | cut -d'.' -f1,2,3).0"
    fi

    echo $network
}

# Gets the network mask
get_mask() {
    mask=$(get_iface_var "MASK")

    if [ -z "$mask" ]; then
        mask="255.255.255.0"
    fi

    echo $mask
}

is_gateway() {
    if [ -z "$GATEWAY_IFACE_NUM" ]; then
        true
    else
        [ "$IFACE_NUM" = "$GATEWAY_IFACE_NUM" ]
    fi
}

# Gets the network gateway
get_gateway() {
    if is_gateway; then
        gateway=$(get_iface_var "GATEWAY")

        if [ -z "$gateway" ]; then
            if [ "$DEV" = "eth0" ]; then
                net_prefix=$(echo $NETWORK | cut -d'.' -f1,2,3)
                gateway="${net_prefix}.1"
            fi
        fi

        echo $gateway
    fi
}

# Gets the network gateway6
get_gateway6() {
    if is_gateway; then
        get_iface_var "GATEWAY6"
    fi
}

get_ip() {
    ip=$(get_iface_var "IP")

    if [ -z "$ip" ]; then
        ip=$(mac2ip $MAC)
    fi

    echo $ip
}

get_iface_var() {
    var_name="${UPCASE_DEV}_$1"
    var=$(eval "echo \"\${$var_name}\"")

    echo $var
}

gen_iface_conf() {
    cat <<EOT
NETMASK=$MASK
IPADDR=$IP
EOT

    if [ ! -z "$GATEWAY" ]; then
        echo "GATEWAY=$GATEWAY"
    fi

    echo ""
}

gen_iface6_conf() {
    cat <<EOT
IPV6INIT=yes
IPV6ADDR=$IPV6
EOT

    if [ ! -z "$GATEWAY6" ]; then
        echo "IPV6_DEFAULTGW=$GATEWAY6"
    fi

    echo ""
}

get_interface_mac()
{
    ip link show | awk '/^[0-9]+: [[:alnum:]]+:/ { device=$2; gsub(/:/, "",device)} /link\/ether/ { print device " " $2 }'
}

get_context_interfaces()
{
    env | grep -E "^ETH[0-9]+_MAC=" | sed 's/_.*$//' | sort
}

get_dev()
{
    list="$1"
    mac="$2"

    echo "$list" | grep "$mac" | cut -d' ' -f1 | tail -n1
}

gen_network_configuration()
{
    mkdir -p /etc/sysconfig/network-scripts
    
    export_rc_vars $CONTEXT
    export DNS_VARIABLES="DNS $(env | sed 's/=.*$//' | grep -E '^ETH[0-9]+_DNS$' | sort)"
    export SEARCH_VARIABLES="SEARCH_DOMAIN $(env | sed 's/=.*$//' | grep -E '^ETH[0-9]+_SEARCH_DOMAIN$' | sort)"
    nameservers=$(
    for var in ${DNS_VARIABLES}; do
        value=$(eval "echo \"\${$var}\"")
        if [ ! -z "$value" ]; then
            echo "$value"
        fi
    done
    )   
    searchdomains=$(
    for var in ${SEARCH_VARIABLES}; do
        value=$(eval "echo \"\${$var}\"")
        if [ ! -z "$value" ]; then
            echo "$value"
        fi
    done
    )
    
    INTERFACE_MAC=$(get_interface_mac)
    CONTEXT_INTERFACES=$(get_context_interfaces)
    GATEWAY_IFACE_NUM=$(echo "$GATEWAY_IFACE" | sed 's/^ETH//')

    for interface in $CONTEXT_INTERFACES; do
        UPCASE_DEV=$interface
        MAC=$(get_iface_var "MAC")
        DEV=$(get_dev "$INTERFACE_MAC" "$MAC")
        IFACE_NUM=$(echo "$UPCASE_DEV" | sed 's/^ETH//')

        IP=$(get_ip)
        NETWORK=$(get_network)
        MASK=$(get_mask)
        GATEWAY=$(get_gateway)

        IPV6=$(get_iface_var "IPV6")
        [[ -z $IPV6 ]] && IPV6=$(get_iface_var "IP6")
        GATEWAY6=$(get_gateway6)
        CONTEXT_FORCE_IPV4=$(get_iface_var "CONTEXT_FORCE_IPV4")

        (
            cat <<EOT
DEVICE=$DEV
BOOTPROTO=none
ONBOOT=yes
NM_CONTROLLED=no
TYPE=Ethernet
HWADDR=$MAC
PEERDNS=yes
EOT
            [[ -z "$IPV6" || ! -z "$CONTEXT_FORCE_IPV4" ]] && gen_iface_conf
            [[ ! -z $IPV6 ]] && gen_iface6_conf

        ) > /etc/sysconfig/network-scripts/ifcfg-${DEV}

        if [ ! -z "$nameservers" ]; then
            local i=1
            for ns in $nameservers; do
                echo "DNS${i}=${ns}" >> /etc/sysconfig/network-scripts/ifcfg-${DEV}
                i=$((${i}+1))
            done 
        fi

    done
}

configure_network()
{
    . /etc/sysconfig/network-scripts/ifcfg-eth0
    ip link set dev eth0 mtu 1500 address ${HWADDR} up
    ip address add dev eth0 local ${IPADDR}/${NETMASK} broadcast $(ipcalc -b ${IPADDR} ${NETMASK} | cut -d= -f2)
    route add default gw ${GATEWAY} eth0
    echo -n '' > /etc/resolv.conf
    [[ ! -z "$DNS1" ]] && echo "nameserver $DNS1" >> /etc/resolv.conf
    [[ ! -z "$DNS2" ]] && echo "nameserver $DNS2" >> /etc/resolv.conf
}

CONTEXT="$1"
( gen_network_configuration )
if [ -f /etc/sysconfig/network-scripts/ifcfg-eth0 ]; then
  ( configure_network )
  exit 0
fi
exit 1

