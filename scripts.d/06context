#!/bin/sh
#===========================
#FOR:BUILD
#===========================

require_versioned_package curl ${CURL_STRONG_VERSION}

#===========================
#FOR:RUN
#===========================

USER_DATA=/user-data
UCONTEXT_TMP=/ucontext
UCONTEXT_SRC="(none)"
UCONTEXT_TIMEOUT=2
UCONTEXT_TIMEOUT_DATA=10
UCONTEXT_RETRIES=2
CONNECTED=0



#function to analyze result from portprobe.c, if bit(specific IP address) = 1, connected 
#input args: ip, result

check_connection() {  
  ip=$1
  result=$2
  CONNECTED=0
  if [[ $ip == 169.254.169.254 ]]; then    
    index_server=0
  else index_server=1
  fi
  shiftLeft=$((1-$index_server))
  let "result <<= $shiftLeft"
  let "result &= 2"
  if [[ $result == 0 ]]; then
    CONNECTED=0
  else
    CONNECTED=1
  fi
}



fetch_configdrive() {
  mkdir -p /context_mount
  for P in $(cat /proc/partitions | tail -n+3 | awk '{print $4}' | sort); do
    filesystem=$(blkid /dev/$P | grep -o TYPE=[^\ ]* | tr -d '"' | cut -d= -f2)
    echo "  looking for ISO/FAT image at /dev/$P ($filesystem)" >> /var/log/context.log
    if [ "x$filesystem" = "xiso9660" -o "x$filesystem" = "xvfat" ]; then
      mount -o ro -t $filesystem /dev/$P /context_mount >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        if cp /context_mount/openstack/latest/user_data ${USER_DATA} 2>/dev/null; then
          UCONTEXT_SRC="ConfigDrive"
          umount /context_mount
          break
        fi
        umount /context_mount
      fi
    fi
  done
  rmdir /context_mount
}


fetch_opennebula() {
  mkdir -p /context_mount
  for P in $(cat /proc/partitions | tail -n+3 | awk '{print $4}' | sort); do
    filesystem=$(blkid /dev/$P | grep -o TYPE=[^\ ]* | tr -d '"' | cut -d= -f2)
    echo "  looking for ISO/FAT image at /dev/$P ($filesystem)" >> /var/log/context.log
    if [ "x$filesystem" = "xiso9660" -o "x$filesystem" = "xvfat" ]; then
      mount -o ro -t $filesystem /dev/$P /context_mount >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        if [ -f /context_mount/context.sh ]; then
          ( source /context_mount/context.sh && echo ${EC2_USER_DATA} ) | base64 -d > ${USER_DATA}
          UCONTEXT_SRC="OpenNebula"
          umount /context_mount
          break
        fi
        umount /context_mount
      fi
    fi
  done
  rmdir /context_mount
}


fetch_vsphere() {
  mkdir -p /context_mount
  for P in $(cat /proc/partitions | tail -n+3 | awk '{print $4}' | sort); do
    filesystem=$(blkid /dev/$P | grep -o TYPE=[^\ ]* | tr -d '"' | cut -d= -f2)
    echo "  looking for ISO image at /dev/$P ($filesystem)" >> /var/log/context.log
    if [ "x$filesystem" = "xiso9660" ]; then
      mount -o ro -t $filesystem /dev/$P /context_mount >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        if cp /context_mount/user-data.txt ${USER_DATA} 2>/dev/null; then
          UCONTEXT_SRC="vSphere"
          umount /context_mount
          break
        fi
        umount /context_mount
      fi
    fi
  done
  rmdir /context_mount
}


fetch_azure() {
  mkdir -p /context_mount
  for P in $(cat /proc/partitions | tail -n+3 | awk '{print $4}' | sort); do
    filesystem=$(blkid /dev/$P | grep -o TYPE=[^\ ]* | tr -d '"' | cut -d= -f2)
    echo "  looking for ISO image at /dev/$P ($filesystem)" >> /var/log/context.log
    if [ "x$filesystem" = "xudf" ]; then
      mount -o ro -t $filesystem /dev/$P /context_mount >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        if [ -f /context_mount/E6DA6616-8EC4-48E0-BE93-58CE6ACE3CFB.tag ]; then
          UCONTEXT_SRC="Azure"
          AZURE_ISO="/dev/$P"
          cat /context_mount/CustomData.bin > ${USER_DATA} 2>/dev/null
          umount /context_mount
          break
        fi
        umount /context_mount
      fi
    fi
  done
  rmdir /context_mount
}


fetch_rhevm() {
  :
}

download_userdata() {
  local server=$1
  local url=$2
  local meta_url=$3
  local extra_header="$4"
  local extra_header_opt=
  [ "x${extra_header}" != "x" ] && extra_header_opt="-H"
  local retval
  echo "  connecting: nc -w ${UCONTEXT_TIMEOUT} $server 80 -e /bin/true" >> /var/log/context.log

    if [ "x${extra_header}" != "x" ]; then
      echo "  downloading: curl -f -s -o ${USER_DATA} ${extra_header_opt} ${extra_header} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $url" >> /var/log/context.log
      curl -f -s -o ${USER_DATA} ${extra_header_opt} "${extra_header}" --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $url
      retval=$?
    else
      echo "  downloading: curl -f -s -o ${USER_DATA} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $url" >> /var/log/context.log
      curl -f -s -o ${USER_DATA} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $url
      retval=$?
    fi
    if [ $retval -eq 0 ]; then
      return 0
    else
      rm -f ${USER_DATA}
    fi

    # Check if there are meta-data but no user data
    if [ "x$meta_url" != "x" ]; then
      if [ "x${extra_header}" != "x" ]; then
        echo "  downloading: curl -f -s -o ${USER_DATA} ${extra_header_opt} ${extra_header} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $meta_url" >> /var/log/context.log
        curl -f -s -o ${USER_DATA} ${extra_header_opt} "${extra_header}" --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $meta_url
        retval=$?
      else
        echo "  downloading: curl -f -s -o ${USER_DATA} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $meta_url" >> /var/log/context.log
        curl -f -s -o ${USER_DATA} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $meta_url
        retval=$?
      fi
      if [ $retval -eq 0 ]; then
        cat /dev/null > ${USER_DATA}
        return 0
      else
        rm -f ${USER_DATA}
      fi
    fi

  # Failure
  return 1
}

fetch_gce() {
  download_userdata 169.254.169.254 \
    http://169.254.169.254/computeMetadata/v1/instance/attributes/cvm-user-data \
    http://169.254.169.254/computeMetadata/v1/instance/id \
    "X-Google-Metadata-Request: True"
  if [ $? -eq 0 ]; then
    UCONTEXT_SRC="GCE"
    base64 -d ${USER_DATA} > ${USER_DATA}~
    mv ${USER_DATA}~ ${USER_DATA}
  fi
}

fetch_ec2() {
  download_userdata 169.254.169.254 \
    http://169.254.169.254/2009-04-04/user-data \
    http://169.254.169.254/2009-04-04/meta-data/ami-id
  [ $? -eq 0 ] && UCONTEXT_SRC="EC2"
}


fetch_openstack() {
  download_userdata 169.254.169.254 \
    http://169.254.169.254/latest/user-data \
    http://169.254.169.254/latest/meta-data/ami-id
  [ $? -eq 0 ] && UCONTEXT_SRC="OpenStack"
}


fetch_cloudstack() {
  download_userdata 10.1.1.1 \
    http://10.1.1.1/latest/user-data \
    http://10.1.1.1/latest/meta-data/instance-id
  if [ $? -eq 0 ]; then
    UCONTEXT_SRC="CloudStack"
  else
    local dhcp_server=$(cat /var/lib/dhcp-server)
    if [ "x${dhcp_server}" != "x" ]; then
      download_userdata $dhcp_server \
        http://${dhcp_server}/latest/user-data \
        http://${dhcp_server}/latest/meta-data/instance-id
      [ $? -eq 0 ] && UCONTEXT_SRC="CloudStack"
    fi
  fi
}


if [ ! -b "${ROOT_DEV}" ]; then
  log_start "Contextualizing VM..."
  for data_source in configdrive opennebula vsphere azure rhevm; do
    [ -f ${USER_DATA} ] && break
    echo "looking for user data at $data_source" >> /var/log/context.log
    fetch_${data_source}
  done
  
  #check connection for the first server 
  result="$(portprobe 169.254.169.254 10.1.1.1 1)"
  check_connection 169.254.169.254 $result
  if [ ${CONNECTED} == 1 ]; then
  for data_source in gce ec2 openstack; do
      [ -f ${USER_DATA} ] && break
      echo "looking for user data at $data_source" >> /var/log/context.log
      fetch_${data_source}
  done
  fi

  #check connection for the second server
  check_connection 10.1.1.1 $result
  if [ ${CONNECTED} == 1 ]; then
  for data_source in cloudstack; do
      [ -f ${USER_DATA} ] && break
      echo "looking for user data at $data_source" >> /var/log/context.log
      fetch_${data_source}
  done
  fi

  
 
  if [ -f ${USER_DATA} ]; then
    echo "found user data at $UCONTEXT_SRC" >> /var/log/context.log
    # Try to unzip
    cat ${USER_DATA} | gzip -d 2>/dev/null > ${USER_DATA}~
    if [ $? -eq 0 ]; then
      echo "unzipped user data" >> /var/log/context.log
      mv ${USER_DATA}~ ${USER_DATA}
    else
      rm -f ${USER_DATA}~
    fi
    cat ${USER_DATA} | parse_user_data > ${UCONTEXT_TMP}
    . ${UCONTEXT_TMP}
  fi
  
  log_info ${UCONTEXT_SRC}
fi
