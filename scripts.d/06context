#!/bin/sh
#===========================
#FOR:BUILD
#===========================

require_versioned_package curl ${CURL_STRONG_VERSION}

#===========================
#FOR:RUN
#===========================

USER_DATA=/user-data
UCONTEXT_TMP=/ucontext
UCONTEXT_SRC="(none)"
UCONTEXT_TIMEOUT=2
UCONTEXT_TIMEOUT_DATA=10
UCONTEXT_RETRIES=2


# Function to analyze output from portprobe.c, if bit(specific IP address) = 1, connected 
# input args: output from portprobe.c, index of the IP address
is_bit_set() {  
  output=$1
  index_server=$2
  shift_left=$((1-$index_server))
  let "output <<= $shift_left"
  let "output &= 2"
  if [[ $output == 0 ]]; then
    return 1
  else
    return 0
  fi
}


fetch_configdrive() {
  mkdir -p /context_mount
  for P in $(cat /proc/partitions | tail -n+3 | awk '{print $4}' | sort); do
    filesystem=$(blkid /dev/$P | grep -o TYPE=[^\ ]* | tr -d '"' | cut -d= -f2)
    echo "  looking for ISO/FAT image at /dev/$P ($filesystem)" >> /var/log/context.log
    if [ "x$filesystem" = "xiso9660" -o "x$filesystem" = "xvfat" ]; then
      mount -o ro -t $filesystem /dev/$P /context_mount >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        if cp /context_mount/openstack/latest/user_data ${USER_DATA} 2>/dev/null; then
          UCONTEXT_SRC="ConfigDrive"
          umount /context_mount
          break
        fi
        umount /context_mount
      fi
    fi
  done
  rmdir /context_mount
}


fetch_opennebula() {
  mkdir -p /context_mount
  for P in $(cat /proc/partitions | tail -n+3 | awk '{print $4}' | sort); do
    filesystem=$(blkid /dev/$P | grep -o TYPE=[^\ ]* | tr -d '"' | cut -d= -f2)
    echo "  looking for ISO/FAT image at /dev/$P ($filesystem)" >> /var/log/context.log
    if [ "x$filesystem" = "xiso9660" -o "x$filesystem" = "xvfat" ]; then
      mount -o ro -t $filesystem /dev/$P /context_mount >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        if [ -f /context_mount/context.sh ]; then
          ( source /context_mount/context.sh && echo ${EC2_USER_DATA} ) | base64 -d > ${USER_DATA}
          UCONTEXT_SRC="OpenNebula"
          umount /context_mount
          break
        fi
        umount /context_mount
      fi
    fi
  done
  rmdir /context_mount
}


fetch_vsphere() {
  mkdir -p /context_mount
  for P in $(cat /proc/partitions | tail -n+3 | awk '{print $4}' | sort); do
    filesystem=$(blkid /dev/$P | grep -o TYPE=[^\ ]* | tr -d '"' | cut -d= -f2)
    echo "  looking for ISO image at /dev/$P ($filesystem)" >> /var/log/context.log
    if [ "x$filesystem" = "xiso9660" ]; then
      mount -o ro -t $filesystem /dev/$P /context_mount >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        if cp /context_mount/user-data.txt ${USER_DATA} 2>/dev/null; then
          UCONTEXT_SRC="vSphere"
          umount /context_mount
          break
        fi
        umount /context_mount
      fi
    fi
  done
  rmdir /context_mount
}


fetch_azure() {
  mkdir -p /context_mount
  for P in $(cat /proc/partitions | tail -n+3 | awk '{print $4}' | sort); do
    filesystem=$(blkid /dev/$P | grep -o TYPE=[^\ ]* | tr -d '"' | cut -d= -f2)
    echo "  looking for ISO image at /dev/$P ($filesystem)" >> /var/log/context.log
    if [ "x$filesystem" = "xudf" ]; then
      mount -o ro -t $filesystem /dev/$P /context_mount >/dev/null 2>&1
      if [ $? -eq 0 ]; then
        if [ -f /context_mount/E6DA6616-8EC4-48E0-BE93-58CE6ACE3CFB.tag ]; then
          UCONTEXT_SRC="Azure"
          AZURE_ISO="/dev/$P"
          cat /context_mount/CustomData.bin > ${USER_DATA} 2>/dev/null
          umount /context_mount
          break
        fi
        umount /context_mount
      fi
    fi
  done
  rmdir /context_mount
}


fetch_rhevm() {
  :
}

download_userdata() {
  local server=$1
  local url=$2
  local meta_url=$3
  local extra_header="$4"
  local extra_header_opt=
  [ "x${extra_header}" != "x" ] && extra_header_opt="-H"
  local retval

  if [ "x${extra_header}" != "x" ]; then
    echo "  downloading: curl -f -s -o ${USER_DATA} ${extra_header_opt} ${extra_header} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $url" >> /var/log/context.log
    curl -f -s -o ${USER_DATA} ${extra_header_opt} "${extra_header}" --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $url
    retval=$?
  else
    echo "  downloading: curl -f -s -o ${USER_DATA} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $url" >> /var/log/context.log
    curl -f -s -o ${USER_DATA} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $url
    retval=$?
  fi
  if [ $retval -eq 0 ]; then
    return 0
  else
    rm -f ${USER_DATA}
  fi

  # Check if there are meta-data but no user data
  if [ "x$meta_url" != "x" ]; then
    if [ "x${extra_header}" != "x" ]; then
      echo "  downloading: curl -f -s -o ${USER_DATA} ${extra_header_opt} ${extra_header} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $meta_url" >> /var/log/context.log
      curl -f -s -o ${USER_DATA} ${extra_header_opt} "${extra_header}" --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $meta_url
      retval=$?
    else
      echo "  downloading: curl -f -s -o ${USER_DATA} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $meta_url" >> /var/log/context.log
      curl -f -s -o ${USER_DATA} --connect-timeout ${UCONTEXT_TIMEOUT_DATA} $meta_url
      retval=$?
    fi
    if [ $retval -eq 0 ]; then
      cat /dev/null > ${USER_DATA}
      return 0
    else
      rm -f ${USER_DATA}
    fi
  fi
  
  # Failure
  return 1
}

fetch_gce() {
  download_userdata 169.254.169.254 \
    http://169.254.169.254/computeMetadata/v1/instance/attributes/user-data \
    http://169.254.169.254/computeMetadata/v1/instance/id \
    "X-Google-Metadata-Request: True"
  [ $? -eq 0 ] && UCONTEXT_SRC="GCE" 
}

fetch_ec2() {
  download_userdata 169.254.169.254 \
    http://169.254.169.254/2016-04-19/user-data \
    http://169.254.169.254/2016-04-19/meta-data/ami-id
  [ $? -eq 0 ] && UCONTEXT_SRC="EC2"
}


fetch_openstack() {
  download_userdata 169.254.169.254 \
    http://169.254.169.254/openstack/2013-10-17/user_data \
    http://169.254.169.254/openstack/2013-10-17/meta_data.json
  if [ $? -eq 0 ]; then
    UCONTEXT_SRC="OpenStack"
  else
    download_userdata 169.254.169.254 \
      http://169.254.169.254/latest/user-data \
      http://169.254.169.254/latest/meta-data/ami-id
    [ $? -eq 0 ] && UCONTEXT_SRC="OpenStack"
  fi
}


fetch_cloudstack() {
  download_userdata 10.1.1.1 \
    http://10.1.1.1/latest/user-data \
    http://10.1.1.1/latest/meta-data/instance-id
  if [ $? -eq 0 ]; then
    UCONTEXT_SRC="CloudStack"
  else
    local dhcp_server=$(cat /var/lib/dhcp-server)
    if [ "x${dhcp_server}" != "x" ]; then
      download_userdata $dhcp_server \
        http://${dhcp_server}/latest/user-data \
        http://${dhcp_server}/latest/meta-data/instance-id
      [ $? -eq 0 ] && UCONTEXT_SRC="CloudStack"
    fi
  fi
}


glideinwms_detect() {
  local user_data="$1"

  if [ "x$_UCONTEXT_USEGLIDEINWMS" = "x0" ]; then
    echo "glideinWMS autodetect disabled by configuration, skipping" >> /var/log/context.log
    return 1
  fi
  
  if [ $(cat ${user_data} | wc -l) -gt 1 ]; then
    # Too many lines, glideinwms user-data is a single line
    return 1
  fi

  if ! grep -q '[^#]*#### -cluster [0-9]* -subcluster [0-9]*####[^#\n]*' ${user_data}; then
    # Wrong format
    return 1
  fi

  return 0
}


if [ ! -b "${ROOT_DEV}" ]; then
  log_start "Contextualizing VM..."
  
  while true; do
    # Start with contextualization sources that don't require network
    for data_source in configdrive opennebula vsphere azure rhevm; do
      echo "looking for user data at $data_source" >> /var/log/context.log
      fetch_${data_source}
      [ -f ${USER_DATA} ] && break 2
    done

    dhcp_server_present=0
    connection_output= 
    local dhcp_server=$(cat /var/lib/dhcp-server)
    if [ "x${dhcp_server}" != "x" ]; then
      dhcp_server_present=1
      connection_output="$(portprobe 169.254.169.254 10.1.1.1 ${dhcp_server} ${UCONTEXT_TIMEOUT})"
    else
      connection_output="$(portprobe 169.254.169.254 10.1.1.1 ${UCONTEXT_TIMEOUT})"
    fi

    # Check connection for EC2 compabtible server and proceed if connected
    if is_bit_set $connection_output 0; then
      for data_source in gce ec2 openstack; do
        echo "looking for user data at $data_source" >> /var/log/context.log
        fetch_${data_source}
        [ -f ${USER_DATA} ] && break 2
      done
    fi

    # Check connection for CloudStack endpoint
    if is_bit_set $connection_output 1 -o is_bit_set $connection_output 2; then
      for data_source in cloudstack; do
        echo "looking for user data at $data_source" >> /var/log/context.log
        fetch_${data_source}
        [ -f ${USER_DATA} ] && break 2
      done
    fi

    break
  done

  if [ -f ${USER_DATA} ]; then
    echo "found user data at $UCONTEXT_SRC" >> /var/log/context.log
    # Try to unzip
    cat ${USER_DATA} | gzip -d 2>/dev/null > ${USER_DATA}~
    if [ $? -eq 0 ]; then
      echo "unzipped user data" >> /var/log/context.log
      mv ${USER_DATA}~ ${USER_DATA}
    else
      rm -f ${USER_DATA}~
    fi
    cat ${USER_DATA} | parse_user_data > ${UCONTEXT_TMP}

    . ${UCONTEXT_TMP}

    # CMS currently cannot generate ucernvm context snippets.
    # Parse cvmfs settings from glidein proxy
    if glideinwms_detect ${USER_DATA}; then
      glidein_startup="$(cat ${USER_DATA} | cut -d'#' -f 1 | base64 -d | grep ^args | head -n 1)"
      cernvm_cms_proxy="$(echo $glidein_startup | grep param_CERNVM_CMS_PROXY | sed -r 's/.* -param_CERNVM_CMS_PROXY ([^ ]+).*/\1/' | sed 's/.semicolon,/;/g' | sed 's/\.colon,/:/g' | sed 's/.pipe,/|/g' | sed 's/.minus,/-/g' | sed 's/.dot,/./g')"
      cernvm_pac_urls="$(echo $glidein_startup | grep param_CERNVM_CMS_PAC_URLS | sed -r 's/.* -param_CERNVM_CMS_PAC_URLS ([^ ]+).*/\1/' | sed 's/.semicolon,/;/g' | sed 's/\.colon,/:/g' | sed 's/.pipe,/|/g' | sed 's/.minus,/-/g' | sed 's/.dot,/./g')"
      if [ x"$cernvm_cms_proxy" != "x" ]; then
        echo "applying cvmfs settings (proxy) from glideinWMS user data" >> /var/log/context.log
        echo "_UCONTEXT_CVMFS_HTTP_PROXY=${cernvm_cms_proxy}" >> ${UCONTEXT_TMP} 
      fi
      if [ x"$cernvm_pac_urls" != "x" ]; then
        echo "applying cvmfs settings (pac urls) from glideinWMS user data" >> /var/log/context.log
        echo "_UCONTEXT_CVMFS_PAC_URLS=${cernvm_pac_urls}" >> ${UCONTEXT_TMP}
      fi

      # This can be picked up later on
      cp ${USER_DATA} /glideinwms-user-data

      # Parse again with extracted proxy information
      . ${UCONTEXT_TMP}
    fi
  fi
  
  log_info ${UCONTEXT_SRC}
fi

