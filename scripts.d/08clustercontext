#!/bin/sh
#===========================
#FOR:BUILD
#===========================

require_versioned_package curl ${CURL_STRONG_VERSION}
require_package ca-certificates

#===========================
#FOR:RUN
#===========================

CLUSTER_SERVICE_URL_DEFAULT=https://cernvm-online.cern.ch
# This file has to be created by previous steps
CONTEXT_FILE=/user-data
# Busybox binary
BBOX=busybox

# How many times we try to connect to the service
# A try every ~30s * 50 = ~25minutes
MAX_TRIES=50
# Sleep time in seconds between each try
SLEEP_TIME_BETWEEN_REQUESTS=25
# Key name under which the master stores its IP in the contextualization service
MASTER_IP_FIELD=master_ip
# Key name under which the master stores its ready status in the contextualization service
READY_STATUS_KEY_FIELD=master_ready
# Pattern in the context file, which gets replaced by the fetched data
PLACECEHOLDER_REPLACEMENT=###MASTER_IP_PLACEHOLDER###

# Return cluster_pin from the context file
get_cluster_pin_from_context() {
    echo "$_UCONTEXT_CVM_CLUSTER_PIN"
}

# Return cluster contextualization URL: either from the context file or the default value
get_service_url() {
    local SERVICE_URL=
    SERVICE_URL=$_UCONTEXT_CVM_SERVICE_URL
    if [ "$SERVICE_URL" ]; then
        echo "$SERVICE_URL"
    else
        echo "$CLUSTER_SERVICE_URL_DEFAULT" # empty field, using default
    fi
}

# Create a marker file indicating that contextualization has been done
create_ami_marker_file() {
    # We create it in a root directory, from where it gets transfered to
    # the /mnt/.rw/context directory during the 13context_epilog phase
    touch /ami-contextualized
}

# Check if the marker file exists or the context file is not available
marker_file_exists() {
    if [ -f /mnt/.rw/context/ami-contextualized -o ! -f "$CONTEXT_FILE" ]; then
        return 0
    else
        return 1
    fi
}

############################################################
# MASTER PART

# Do a master contextualization (get IP and push it to the server)
master_contextualization() {
    local CLUSTER_PIN=$( get_cluster_pin_from_context )
    if [ "x$CLUSTER_PIN" = "x" ]; then
        log_start "Context file does not have a cluster pin\n"
        return 1
    fi

    local SERVICE_URL=$( get_service_url )

    log_start "Master cluster contextualization: setting master keys"

    # Extract the ip address of the master
    INTERFACE_NAME=$( $BBOX ifconfig | head -n 1 | cut -d: -f1 | awk '{print $1}' )
    IP_ADDRESS=$( $BBOX ifconfig $INTERFACE_NAME | grep 'inet addr' | cut -d: -f2 | awk '{print $1}' )
    if [ $? -ne 0 -o "x$IP_ADDRESS" = "x" ]; then
        log_fail
        log_warn "Unable to get the IP address of this machine\n"
        return 1
    fi
    DATA=$( echo "{ \"key\": \"$MASTER_IP_FIELD\", \"value\": \"$IP_ADDRESS\" }" )

    local CURL_HEADERS="-H Content-Type:application/json"

    #@- == take data from stdin, ignore output and print only the response status code
    local CURL_CMD="curl --cacert /etc/cernvm/ca-bundle.crt -s -o /dev/null -w %{http_code} -XPOST $CURL_HEADERS -d @- $SERVICE_URL/api/v1/clusters/$CLUSTER_PIN/keys"

    local cnt=0
    local status_code=
    while [ $cnt -lt $MAX_TRIES ]; do
        status_code=$( echo "$DATA" | $CURL_CMD )
        if [ "x$status_code" = "x201" ]; then
            break  # success
        fi
        cnt=$(($cnt+1))
        local rand=$( grep -m1 -ao '[0-9]' /dev/urandom | head -n1 ) # get 0-9
        sleep $(( $SLEEP_TIME_BETWEEN_REQUESTS + $rand )) #add 10s jitter
    done

    if [ "x$status_code" = "x201" ]; then
        log_ok
        log_start "Master IP address successfully pushed to the server\n"
        return 0
    else
        log_fail
        log_warn "Unable to push the master IP address to the server\n"
        return 1
    fi
}

############################################################
# SLAVE PART

# Make a repeated (if necessary) slave curl request. You need to pass the target URL as a parameter.
# Returns a response with a status code in the following format: RESPONSE_TEXT\n\nSTATUS_CODE
make_slave_curl_request() {
    local url="$1"

    local CURL_HEADERS="-H Accept:text/plain"
    # Output format: Content_of_the_reply\n\nstatus_code_number
    local CURL_CMD_TEMPLATE="curl --cacert /etc/cernvm/ca-bundle.crt -s -w \n\n%{http_code} -XGET"
    local CURL_CMD="$CURL_CMD_TEMPLATE $CURL_HEADERS $url"

    local response=
    local cnt=0
    while [ $cnt -lt $MAX_TRIES ]; do
        response=$( $CURL_CMD )
        local status_code=
        status_code=$( echo "${response}" | tail -n 1 )  # get the last line with status code
        #response=$( echo "${response}" | head -n -2 )  # get everything except the last line
        if [ "x$status_code" = "x200" ]; then
            echo -n "$response"  # success, return immediately
            return 0
        fi
        # Sleep for a while and then try again
        cnt=$(($cnt+1))
        local rand=$( grep -m1 -ao '[0-9]' /dev/urandom | head -n1 ) # get 0-9
        sleep $(( $SLEEP_TIME_BETWEEN_REQUESTS + $rand )) #add 10s jitter
    done

    # Return response no matter the result
    echo -n "$response"
}

slave_contextualization() {
    local CLUSTER_PIN=$( get_cluster_pin_from_context )
    if [ "x$CLUSTER_PIN" = "x" ]; then
        log_start "Context file does not have a cluster pin\n"
        return 1
    fi

    # Polling the server for 'master ready' status
    log_start "Polling the server for 'master ready' status"

    local SERVICE_URL=$( get_service_url )

    # Poll the API until the master becomes available (field 'master_ready' appears)
    local url="$SERVICE_URL/api/v1/clusters/$CLUSTER_PIN/keys/$READY_STATUS_KEY_FIELD"

    local response=
    local status_code=
    response=$(make_slave_curl_request $url)
    status_code=$( echo "$response" | tail -n 1 )  # get the last line with status code

    if [ "x$status_code" != "x200" ]; then
        log_fail
        return 1
    fi

    # We've got the 'master_ready' status
    log_ok

    # Get the master IP address
    log_start "Getting the master IP address from the server"

    url="$SERVICE_URL/api/v1/clusters/$CLUSTER_PIN/keys/$MASTER_IP_FIELD"

    response=$(make_slave_curl_request $url)
    status_code=$( echo "${response}" | tail -n 1 )  # get the last line with status code
    response=$( echo "$response" | head -n -2 )  # get everything except the last line with the status code

    if [ "x$status_code" != "x200" ]; then
        log_fail
        return 1
    fi

    # We've got the 'master_ip' field
    log_ok

    #Erase the 'key: ' part from the response
    local masterIp=
    masterIp=$( echo "$response" | sed "s/$MASTER_IP_FIELD: //g" )
    sed -i "s/$PLACECEHOLDER_REPLACEMENT/$masterIp/g" $CONTEXT_FILE 2>/dev/null

    log_start "Replaced the IP placeholder with: $masterIp"
    log_ok

    echo "Replaced the IP placeholder with: $masterIp" >> /var/log/context.log
}

contextualization() {
    marker_file_exists && return 0  # Contextualization has run before

    if IsOnMasterMachine; then
        master_contextualization
    else
        slave_contextualization
    fi

    # No matter the result, create the marker file, so it runs only on first boot
    create_ami_marker_file
}
contextualization # call the main contextualization function
